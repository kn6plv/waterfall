#!/usr/bin/lua
--[[

	Part of AREDN -- Used for creating Amateur Radio Emergency Data Networks
	Copyright (C) 2022 Tim Wilkinson
	See Contributors file for additional contributors

	This program is free software: you can redistribute it and/or modify
	it under the terms of the GNU General Public License as published by
	the Free Software Foundation version 3 of the License.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program.  If not, see <http://www.gnu.org/licenses/>.

	Additional Terms:

	Additional use restrictions exist on the AREDN(TM) trademark and logo.
		See AREDNLicense.txt for more info.

	Attributions to the AREDN Project must be retained in the source code.
	If importing this code into a new or existing project attribution
	to the AREDN project must be added to the source code.

	You must not misrepresent the origin of the material contained within.

	Modified versions must be modified to attribute to the original source
	and be marked in reasonable ways as differentiate it from the original
	version

--]]

require("aredn.http")
require("aredn.hardware")
local html = require("aredn.html")
local aredn_info = require("aredn.info")

local wifiiface = aredn.hardware.get_iface_name("wifi")
local rfband = aredn.hardware.get_rfband()
local nf = iwinfo.nl80211.noise(wifiiface) or -95
local bw
for line in io.lines("/etc/config.mesh/_setup")
do
    bw = line:match("^wifi_chanbw%s=%s(%d+)")
    if bw then
        break
    end
end
bw = tonumber(bw) or 10

local nr_subsamples = 56
local start_freq
local end_freq
local freq2chan = ""
if rfband == "900" then
    nr_samples = 5 * nr_subsamples
elseif rfband == "2400" then
    nr_samples = 20 * nr_subsamples
elseif rfband == "3400" then
    nr_samples = 27 * nr_subsamples
else
    start_freq = 5655
    end_freq = 5920
    freq2chan="freq2chan = (f) => (f - 5000) / 5;"
end
local min_sig = -125
local cnf = nf - 17.5 -- sub-carrier noise floor
if bw == 10 then
    cnf = cnf - 3
elseif bw == 5 then
    cnf = cnf - 6
end

start_freq = start_freq - bw / 2
end_freq = end_freq + bw / 2
local nr_samples = (end_freq - start_freq) / bw * nr_subsamples
local cheight = 400
local wheight = 200
local bheight = 5
local yscale = 5
local sample_width = 0.5;
local cwidth = sample_width * nr_samples

http_header()
html.header("WiFi scanner", true)
html.print([[<body><style>
.lds-dual-ring {
    display: inline-block;
    width: 60px;
    height: 34px;
}
.lds-dual-ring:after {
    content: " ";
    display: block;
    width: 16px;
    height: 16px;
    margin: 8px;
    border-radius: 50%;
    border: 6px solid black;
    border-color: #bd1e2d transparent #bd1e2d transparent;
    animation: lds-dual-ring 3s linear infinite;
}
@keyframes lds-dual-ring {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(360deg);
    }
}  
.s {
    display: inline-block;
    width: ]] .. sample_width .. [[px;
    height: 0px;
    background-color: yellow;
    border-top: 0px solid purple;
    border-bottom: 0px solid red;
    box-sizing: border-box;
    transition: height 1s, border-top-width 1s, border-bottom-width 1s;
}
.k {
    position: absolute;
    display: inline-block;
    top: 6px;
    left: 35px;
    vertical-align: top;
    text-align: left;
    color: white;
    background-color: black;
    border: solid 1px grey;
    padding: 10px;
    font-size: 12px;
    line-height: 16px;
}
</style>
<center style="font-family: Arial"><h1>WiFi Scanner<div class="lds-dual-ring"></div></h1>
<div style="padding:8px">Spectral View</div>
<div style="position:relative;display:inline-block"><div style="position:absolute;left:-430px;top:200px;transform:rotate(-90deg)">SNR</div></div>
<div style="position:relative;width:]] .. cwidth .. [[px;height:]] .. cheight .. [[px;border:1px solid grey;background-color:black;text-align:left;overflow:hidden;">
<div id="spectral" style="position:absolute;bottom:0;width:100%;">]])
for _ = 1,nr_samples
do
    html.write([[<div class="s"></div>]])
end
html.print([[</div>
<canvas id="overlay" style="position:absolute;" width="]] .. cwidth .. [[" height="]] .. cheight .. [["></canvas>
<div class="k">
<div><span style="background-color:purple">&nbsp;&nbsp;&nbsp;</span> 5% of traffic</div>                                                                         
<div><span style="background-color:yellow">&nbsp;&nbsp;&nbsp;</span> 95% of traffic</div>                                                                              
<div><span style="background-color:red">&nbsp;&nbsp;&nbsp;</span> Ambient noise</div>               
</div>   
</div>
<div style="padding:4px">Channel</div>
<div id="waterfall" style="width:]] .. cwidth .. [[px;height:]] .. wheight .. [[px;border:1px solid grey;background-color:black;"></div>
<div style="padding:4px">Waterfall</div>
</center>
<script>
    ]] .. freq2chan .. [[
    const spec = document.getElementById("spectral")
    const bars = spec.children;
    const waterfall = document.getElementById("waterfall");
    function sample() {
        const req = new XMLHttpRequest();
        req.open("GET", "waterfall-update");
        req.addEventListener("load", () => {
            const bar = document.createElement("canvas");
            bar.width = ]] .. cwidth .. [[;
            bar.height = ]] .. bheight .. [[;
            const ctx = bar.getContext("2d");
            const scan = req.responseText;
            for (let i = 0; i < scan.length - 1; i += 3) {
                const h = scan.charCodeAt(i) - 32;
                const m = scan.charCodeAt(i + 1) - 32;
                const l = scan.charCodeAt(i + 2) - 32;
                const idx = i / 3;
                const s = bars[idx].style;
                s.height = (h * ]] .. yscale .. [[) + "px";
                s.borderTopWidth = ((h - m) * ]] .. yscale .. [[) + "px";
                s.borderBottomWidth = (l * ]] .. yscale .. [[) + "px";
                ctx.fillStyle = "hsl(240, 100%, " + Math.min(100, m * m / 15) + "%)";
                ctx.fillRect(idx * ]] .. sample_width .. [[, 0, ]] .. math.max(1, sample_width) .. [[, ]] .. bheight .. [[);
            }
            waterfall.insertBefore(bar, waterfall.firstChild);
            if (waterfall.children.length * ]] .. bheight .. [[ > ]] .. wheight .. [[) {
                waterfall.removeChild(waterfall.lastChild);
            }
            sample();
        });
        req.send();
    }
    sample();
    const overlay = document.getElementById("overlay");
    const ctx = overlay.getContext("2d");
    ctx.strokeStyle = "rgba(255,255,255,0.5)";
    ctx.fillStyle = "white";
    ctx.font = "bold 12px Arial";
    ctx.textAlign = "center";
    ctx.beginPath()
    for (let f = ]] .. start_freq .. [[; f <= ]] .. end_freq .. [[; f += 5) {
        const chan = freq2chan(f);
        if (chan % 2 === 0) {
            const x = Math.floor((f - ]] .. start_freq .. [[) * ]] .. (cwidth / (end_freq - start_freq)) .. [[);
            ctx.moveTo(x, 0);
            ctx.lineTo(x, ]] .. (cheight - 20) .. [[);
            ctx.fillText("" + chan, x, ]] .. (cheight - 4) .. [[);
        }
    }
    ctx.stroke();
    ctx.textAlign = "left";
    ctx.strokeStyle = "rgba(255,255,255,0.5)";
    ctx.beginPath();
    for (let snr = 60; snr >= 0; snr -= 10) {
        const y = ]] .. cheight .. [[ - (snr + ]] .. (cnf - min_sig) .. [[) * ]] .. yscale .. [[;
        ctx.moveTo(20, y);
        ctx.lineTo(]] .. cwidth .. [[, y);
        ctx.fillText("" + snr, 2, y);
    }
    ctx.stroke();
</script>
</center></body></html>]])
http_footer()
